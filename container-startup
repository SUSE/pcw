#!/bin/sh
# Startup helper for pcw. This file makes the handling with pcw within containers easier
# See usage() for a usage summary

CMD=$1
shift

usage() {
	echo "pcw startup helper"
	echo "Usage: $0 COMMAND"
	echo "COMMANDS:"
	echo "   help                    Print help message"
	echo "   check                   Run system health checks"
	echo "   run                     Standart publiccloud-watcher run procedure"
	echo "   migrate                 Run database migration"
	echo "   createuser USER"
	echo "   createsuperuser         Create superuser. Requires --email and --username argument"
	echo "	 updaterun 							 Do a regular instance scan and persist results to local DB"
	echo "	 rmclusters							 Scan whole AWS account and delete ANY EKS clusters"
	echo ""
	echo "All other commands will be passed as arguments to 'manage.py'"
}

case "$CMD" in
	"")
		usage
		exit 1
		;;
	"help")
		usage
		exit 0
		;;
	"-h")
		usage
		exit 0
		;;
	"--help")
		usage
		exit 0
		;;
	"run")
		python3 manage.py migrate --database auth_db --run-syncdb && \
		python3 manage.py migrate && \
		uwsgi --enable-threads -L --http-socket 0.0.0.0:8000  --plugins python3 --module webui.wsgi --static-map /static=/pcw/ocw/static
		;;
	"check")
		python3 manage.py check
		;;
	"migrate")
		python3 manage.py migrate
		;;
	"createuser")
		if [ -z "$1" ] ; then
			usage
			exit 1
		fi
		# XXX: We need to find a way to store an (user-supplied) hashed password other than using SQL to insert into the auth_user table
		PASSWORD=$(python3 manage.py shell -c 'from django.contrib.auth.models import User; User.objects.make_random_password(50)')
		python3 manage.py shell -c "from django.contrib.auth.models import User; user = User.objects.create_user('$1', password='$PASSWORD'); user.save()"
		echo "$PASSWORD"
		;;
	"createsuperuser")
		python3 manage.py createsuperuser "$@"
		;;
	"updaterun")
		python3 manage.py updaterun
		;;
	"rmclusters")
		python3 manage.py rmclusters
		;;
	*)
		python3 manage.py "$@"
esac
